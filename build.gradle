import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'application'
    id 'jacoco'
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '8.29'
}

run {
    enableAssertions = true
}

test {
    // Set
    jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : true}"
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

test {
    systemProperty 'testfx.setup.timeout', '60000'
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }

    doFirst {
        boolean runHeadless = gradle.taskGraph.hasTask(headlessTest)

        if (System.env.'CI') {
            println "Skipping GUI tests"
            test.exclude 'seedu/address/ui'
        } else {
            if (runHeadless) {
                println "Running gui test in headless environment"
            }
            jvmArgs "-Dheadless=${project.hasProperty('headless') ? project.headless : runHeadless}"
        }

    }
}

task headlessTest

headlessTest.dependsOn test

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '11'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    implementation 'com.jfoenix:jfoenix:9.0.10'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26'

}

shadowJar {
    archiveFileName = 'TBM.jar'

}

defaultTasks 'clean', 'test', 'headlessTest'
